var mongodb=require('./db');
function User(user){
    this.name=user.name;
    this.password=user.password;
};//首先创建一个User的module，存储的User模型，具有name和password！
module.exports=User;
//创建一个对象的方法有三种，1：直接写，2：new function 3：createObj
User.prototype.save=function save(callback){
    var user={
        name:this.name,
        password:this.password
    }//这步是创建对象，因为写入对象的时候用的方法是user=new User({name:"df",password:"dd"})
    mongodb.open(function(err,db){//打开数据库链接的默认方法，接收一个error，传入一个db的变量来操作
        if(err){
            return callback(err);//当数据链接发生错误的时候，就调用我们的定义的callback函数返回
        }
        db.collection('users',function(err,collection){//链接一个users的数据库，没有的话就直接创建
            if(err){ 
                mongodb.close();//当数据库已经打开,我们链接发生错误的时候首先要关闭数据库
                return callback (err);
            }
            collection.ensureIndex('name',{unique:true});//没有错误的时候用name作为检索的变量
            collection.insert(user,{safe:true},function(err,user){
                //插入数据库我们的user，发生错误的时候返回err,提前也是要关闭数据库
                mongodb.close();
                callback(err,user);
            })
        })
    })
}
User.get=function get(username,callback){//get方法需要传入两个参数一个是username，还需要一个callback用来返回
    mongodb.open(function(err,db){
        if(err){
            return callback(err);
            console.log('出错')//链接数据库出错返回链接错误
        }
        db.collection('users',function(err,collection){
            if (err){
                mongodb.close()//链接上的了出错先关闭数据库
                return callback(err)//
            }
            collection.findOne({name:username},function(err,doc){//这步是一个回调函数，将我们需要查找的使用{name:"shun"}这样的形式去查找，找到了再去cpu执行后面的doc函数
            //找到了或者找不到都关闭数据库
                mongodb.close();
                if(doc){
                    // console.log(doc)
                    var user=new User(doc);//
                    callback(err,user)
                }else{

                    callback(err)
                }
            })

        })
    })
}